pragma solidity 0.8.10;

contract GreenEnergyQomodity {

    using SafeMath for uint256;

// Token details
    string public constant symbol = "eQOM";
    string public constant name = "Green Energy Qommodity";
    uint8 public constant decimals = 18;
    uint256 _totalSupply;
    uint256 _burnedTotal;
    uint256 _mintedTotal;
    address public owner;
    address public admin;

    mapping(address => uint256) balances;
    mapping(address => mapping (address => uint256)) allowances;

    constructor() {
        owner = msg.sender;
        mint(owner, 2700000000 * 10 ** uint256(decimals));
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }
    function balanceOf(address account) public view returns (uint256 balance) {
        return balances[account];
    }

    function transfer(address _to, uint256 _amount) public returns (bool success) {
        require(msg.sender != address(0), "Please use a valid FROM address");
        require(_to != address(0), "Please use a valid TO address");
        require(balances[msg.sender] >= _amount);
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(msg.sender, _to, _amount);
        return true;
    }
    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {
        require(_from != address(0), "Please use a valid FROM address");
        require(_to != address(0), "Please use a valid TO address");
        require(balances[_from] >= _amount && allowances[_from][msg.sender] >= _amount);
        balances[_from] = balances[_from].sub(_amount);
        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(_from, _to, _amount);
        return true;
    }
    function approve(address spender, uint256 _amount) public returns (bool) {
        _approve(msg.sender, spender, _amount);
        return true;
    }
    function _approve(address _owner, address _spender, uint256 _amount) internal {
        require(_owner != address(0), "Please use a valid OWNER address");
        require(_spender != address(0), "Please use a valid SPENDER address");
        allowances[_owner][_spender] = _amount;
        emit Approval(_owner, _spender, _amount);
    }
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowances[_owner][_spender];
    }
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(msg.sender, spender, allowances[msg.sender][spender].sub(subtractedValue));
        return true;
    }
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(msg.sender, spender, allowances[msg.sender][spender].add(addedValue));
        return true;
    }
    function burn(uint256 _amount) public {
        require(msg.sender == admin || msg.sender == owner,"This function can only be carried out by the administrator or owner.");
        require(_amount > 0, "You cannot burn zero tokens");
        require(balanceOf(msg.sender) >= _amount, "Your balance is too low");
        _totalSupply -= _amount;
        _burnedTotal += _amount;
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        emit Transfer(msg.sender, address(0), _amount);
    }
    function burnedTotal() public view returns (uint256) {
        return _burnedTotal;
    }
    function mint(address _to, uint256 _amount) public {
        require(msg.sender == admin || msg.sender == owner,"This function can only be carried out by the administrator or owner.");
        require(_to != address(0), "Please use a valid TO address");
        require(_amount > 0, "You cannot mint zero tokens");
        _totalSupply += _amount;
        _mintedTotal += _amount;
        balances[_to] = balances[_to].add(_amount);
        emit Transfer(address(0), _to, _amount);
    }
    function mintedTotal() public view returns (uint256) {
        return _mintedTotal;
    }
    function setAdmin(address _user) public {
        require(msg.sender == owner,"This function can only be carried out by the owner.");
        admin = _user;
    }
    event Transfer(address indexed _from, address indexed _to, uint _value);
    event Approval(address indexed _owner, address indexed _spender, uint _value);
}

library SafeMath {
    
function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");
    return c;
}
function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a, "SafeMath: subtraction overflow");
    uint256 c = a - b;
    return c;
}
}
